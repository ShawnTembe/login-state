(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('rxjs/Subscriber'), require('rxjs/operator/pluck'), require('rxjs/operator/map'), require('rxjs/operator/distinctUntilChanged')) :
    typeof define === 'function' && define.amd ? define(['exports', 'rxjs/Subscriber', 'rxjs/operator/pluck', 'rxjs/operator/map', 'rxjs/operator/distinctUntilChanged'], factory) :
    (factory((global.ngrx = global.ngrx || {}, global.ngrx.core = global.ngrx.core || {}),global.Rx,global.Rx.Observable.prototype,global.Rx.Observable.prototype,global.Rx.Observable.prototype));
}(this, (function (exports,rxjs_Subscriber,rxjs_operator_pluck,rxjs_operator_map,rxjs_operator_distinctUntilChanged) { 'use strict';

var __extends = (undefined && undefined.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
function enterZone(zone) {
    return this.lift(new EnterZoneOperator(zone));
}
var EnterZoneOperator = (function () {
    function EnterZoneOperator(_zone) {
        this._zone = _zone;
    }
    EnterZoneOperator.prototype.call = function (subscriber, source) {
        return source._subscribe(new EnterZoneSubscriber(subscriber, this._zone));
    };
    return EnterZoneOperator;
}());
var EnterZoneSubscriber = (function (_super) {
    __extends(EnterZoneSubscriber, _super);
    function EnterZoneSubscriber(destination, _zone) {
        _super.call(this, destination);
        this._zone = _zone;
    }
    EnterZoneSubscriber.prototype._next = function (value) {
        var _this = this;
        this._zone.run(function () { return _this.destination.next(value); });
    };
    return EnterZoneSubscriber;
}(rxjs_Subscriber.Subscriber));

var __extends$1 = (undefined && undefined.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
function leaveZone(zone) {
    return this.lift(new LeaveZoneOperator(zone));
}
var LeaveZoneOperator = (function () {
    function LeaveZoneOperator(_zone) {
        this._zone = _zone;
    }
    LeaveZoneOperator.prototype.call = function (subscriber, source) {
        return source._subscribe(new LeaveZoneSubscriber(subscriber, this._zone));
    };
    return LeaveZoneOperator;
}());
var LeaveZoneSubscriber = (function (_super) {
    __extends$1(LeaveZoneSubscriber, _super);
    function LeaveZoneSubscriber(destination, _zone) {
        _super.call(this, destination);
        this._zone = _zone;
    }
    LeaveZoneSubscriber.prototype._next = function (value) {
        var _this = this;
        this._zone.runOutsideAngular(function () { return _this.destination.next(value); });
    };
    return LeaveZoneSubscriber;
}(rxjs_Subscriber.Subscriber));

function select(pathOrMapFn) {
    var paths = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        paths[_i - 1] = arguments[_i];
    }
    var mapped$;
    if (typeof pathOrMapFn === 'string') {
        mapped$ = rxjs_operator_pluck.pluck.call.apply(rxjs_operator_pluck.pluck, [this, pathOrMapFn].concat(paths));
    }
    else if (typeof pathOrMapFn === 'function') {
        mapped$ = rxjs_operator_map.map.call(this, pathOrMapFn);
    }
    else {
        throw new TypeError(("Unexpected type " + typeof pathOrMapFn + " in select operator,")
            + " expected 'string' or 'function'");
    }
    return rxjs_operator_distinctUntilChanged.distinctUntilChanged.call(mapped$);
}

var compose = function () {
    var functions = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        functions[_i - 0] = arguments[_i];
    }
    return function (arg) {
        if (functions.length === 0) {
            return arg;
        }
        var last = functions[functions.length - 1];
        var rest = functions.slice(0, -1);
        return rest.reduceRight(function (composed, fn) { return fn(composed); }, last(arg));
    };
};

exports.enterZone = enterZone;
exports.EnterZoneOperator = EnterZoneOperator;
exports.leaveZone = leaveZone;
exports.LeaveZoneOperator = LeaveZoneOperator;
exports.select = select;
exports.compose = compose;

Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29yZS51bWQuanMiLCJzb3VyY2VzIjpbImNvcmUudW1kLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyA/IGZhY3RvcnkoZXhwb3J0cywgcmVxdWlyZSgncnhqcy9TdWJzY3JpYmVyJyksIHJlcXVpcmUoJ3J4anMvb3BlcmF0b3IvcGx1Y2snKSwgcmVxdWlyZSgncnhqcy9vcGVyYXRvci9tYXAnKSwgcmVxdWlyZSgncnhqcy9vcGVyYXRvci9kaXN0aW5jdFVudGlsQ2hhbmdlZCcpKSA6XG4gICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnZXhwb3J0cycsICdyeGpzL1N1YnNjcmliZXInLCAncnhqcy9vcGVyYXRvci9wbHVjaycsICdyeGpzL29wZXJhdG9yL21hcCcsICdyeGpzL29wZXJhdG9yL2Rpc3RpbmN0VW50aWxDaGFuZ2VkJ10sIGZhY3RvcnkpIDpcbiAgICAoZmFjdG9yeSgoZ2xvYmFsLm5ncnggPSBnbG9iYWwubmdyeCB8fCB7fSwgZ2xvYmFsLm5ncnguY29yZSA9IGdsb2JhbC5uZ3J4LmNvcmUgfHwge30pLGdsb2JhbC5SeCxnbG9iYWwuUnguT2JzZXJ2YWJsZS5wcm90b3R5cGUsZ2xvYmFsLlJ4Lk9ic2VydmFibGUucHJvdG90eXBlLGdsb2JhbC5SeC5PYnNlcnZhYmxlLnByb3RvdHlwZSkpO1xufSh0aGlzLCAoZnVuY3Rpb24gKGV4cG9ydHMscnhqc19TdWJzY3JpYmVyLHJ4anNfb3BlcmF0b3JfcGx1Y2sscnhqc19vcGVyYXRvcl9tYXAscnhqc19vcGVyYXRvcl9kaXN0aW5jdFVudGlsQ2hhbmdlZCkgeyAndXNlIHN0cmljdCc7XG5cbnZhciBfX2V4dGVuZHMgPSAodW5kZWZpbmVkICYmIHVuZGVmaW5lZC5fX2V4dGVuZHMpIHx8IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07XG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xufTtcbmZ1bmN0aW9uIGVudGVyWm9uZSh6b25lKSB7XG4gICAgcmV0dXJuIHRoaXMubGlmdChuZXcgRW50ZXJab25lT3BlcmF0b3Ioem9uZSkpO1xufVxudmFyIEVudGVyWm9uZU9wZXJhdG9yID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBFbnRlclpvbmVPcGVyYXRvcihfem9uZSkge1xuICAgICAgICB0aGlzLl96b25lID0gX3pvbmU7XG4gICAgfVxuICAgIEVudGVyWm9uZU9wZXJhdG9yLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHN1YnNjcmliZXIsIHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLl9zdWJzY3JpYmUobmV3IEVudGVyWm9uZVN1YnNjcmliZXIoc3Vic2NyaWJlciwgdGhpcy5fem9uZSkpO1xuICAgIH07XG4gICAgcmV0dXJuIEVudGVyWm9uZU9wZXJhdG9yO1xufSgpKTtcbnZhciBFbnRlclpvbmVTdWJzY3JpYmVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoRW50ZXJab25lU3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBFbnRlclpvbmVTdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCBfem9uZSkge1xuICAgICAgICBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbik7XG4gICAgICAgIHRoaXMuX3pvbmUgPSBfem9uZTtcbiAgICB9XG4gICAgRW50ZXJab25lU3Vic2NyaWJlci5wcm90b3R5cGUuX25leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdGhpcy5fem9uZS5ydW4oZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMuZGVzdGluYXRpb24ubmV4dCh2YWx1ZSk7IH0pO1xuICAgIH07XG4gICAgcmV0dXJuIEVudGVyWm9uZVN1YnNjcmliZXI7XG59KHJ4anNfU3Vic2NyaWJlci5TdWJzY3JpYmVyKSk7XG5cbnZhciBfX2V4dGVuZHMkMSA9ICh1bmRlZmluZWQgJiYgdW5kZWZpbmVkLl9fZXh0ZW5kcykgfHwgZnVuY3Rpb24gKGQsIGIpIHtcbiAgICBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTtcbiAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG59O1xuZnVuY3Rpb24gbGVhdmVab25lKHpvbmUpIHtcbiAgICByZXR1cm4gdGhpcy5saWZ0KG5ldyBMZWF2ZVpvbmVPcGVyYXRvcih6b25lKSk7XG59XG52YXIgTGVhdmVab25lT3BlcmF0b3IgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIExlYXZlWm9uZU9wZXJhdG9yKF96b25lKSB7XG4gICAgICAgIHRoaXMuX3pvbmUgPSBfem9uZTtcbiAgICB9XG4gICAgTGVhdmVab25lT3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAoc3Vic2NyaWJlciwgc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2UuX3N1YnNjcmliZShuZXcgTGVhdmVab25lU3Vic2NyaWJlcihzdWJzY3JpYmVyLCB0aGlzLl96b25lKSk7XG4gICAgfTtcbiAgICByZXR1cm4gTGVhdmVab25lT3BlcmF0b3I7XG59KCkpO1xudmFyIExlYXZlWm9uZVN1YnNjcmliZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyQxKExlYXZlWm9uZVN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gTGVhdmVab25lU3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgX3pvbmUpIHtcbiAgICAgICAgX3N1cGVyLmNhbGwodGhpcywgZGVzdGluYXRpb24pO1xuICAgICAgICB0aGlzLl96b25lID0gX3pvbmU7XG4gICAgfVxuICAgIExlYXZlWm9uZVN1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHRoaXMuX3pvbmUucnVuT3V0c2lkZUFuZ3VsYXIoZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMuZGVzdGluYXRpb24ubmV4dCh2YWx1ZSk7IH0pO1xuICAgIH07XG4gICAgcmV0dXJuIExlYXZlWm9uZVN1YnNjcmliZXI7XG59KHJ4anNfU3Vic2NyaWJlci5TdWJzY3JpYmVyKSk7XG5cbmZ1bmN0aW9uIHNlbGVjdChwYXRoT3JNYXBGbikge1xuICAgIHZhciBwYXRocyA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMTsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIHBhdGhzW19pIC0gMV0gPSBhcmd1bWVudHNbX2ldO1xuICAgIH1cbiAgICB2YXIgbWFwcGVkJDtcbiAgICBpZiAodHlwZW9mIHBhdGhPck1hcEZuID09PSAnc3RyaW5nJykge1xuICAgICAgICBtYXBwZWQkID0gcnhqc19vcGVyYXRvcl9wbHVjay5wbHVjay5jYWxsLmFwcGx5KHJ4anNfb3BlcmF0b3JfcGx1Y2sucGx1Y2ssIFt0aGlzLCBwYXRoT3JNYXBGbl0uY29uY2F0KHBhdGhzKSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiBwYXRoT3JNYXBGbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBtYXBwZWQkID0gcnhqc19vcGVyYXRvcl9tYXAubWFwLmNhbGwodGhpcywgcGF0aE9yTWFwRm4pO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigoXCJVbmV4cGVjdGVkIHR5cGUgXCIgKyB0eXBlb2YgcGF0aE9yTWFwRm4gKyBcIiBpbiBzZWxlY3Qgb3BlcmF0b3IsXCIpXG4gICAgICAgICAgICArIFwiIGV4cGVjdGVkICdzdHJpbmcnIG9yICdmdW5jdGlvbidcIik7XG4gICAgfVxuICAgIHJldHVybiByeGpzX29wZXJhdG9yX2Rpc3RpbmN0VW50aWxDaGFuZ2VkLmRpc3RpbmN0VW50aWxDaGFuZ2VkLmNhbGwobWFwcGVkJCk7XG59XG5cbnZhciBjb21wb3NlID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBmdW5jdGlvbnMgPSBbXTtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICBmdW5jdGlvbnNbX2kgLSAwXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiAoYXJnKSB7XG4gICAgICAgIGlmIChmdW5jdGlvbnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gYXJnO1xuICAgICAgICB9XG4gICAgICAgIHZhciBsYXN0ID0gZnVuY3Rpb25zW2Z1bmN0aW9ucy5sZW5ndGggLSAxXTtcbiAgICAgICAgdmFyIHJlc3QgPSBmdW5jdGlvbnMuc2xpY2UoMCwgLTEpO1xuICAgICAgICByZXR1cm4gcmVzdC5yZWR1Y2VSaWdodChmdW5jdGlvbiAoY29tcG9zZWQsIGZuKSB7IHJldHVybiBmbihjb21wb3NlZCk7IH0sIGxhc3QoYXJnKSk7XG4gICAgfTtcbn07XG5cbmV4cG9ydHMuZW50ZXJab25lID0gZW50ZXJab25lO1xuZXhwb3J0cy5FbnRlclpvbmVPcGVyYXRvciA9IEVudGVyWm9uZU9wZXJhdG9yO1xuZXhwb3J0cy5sZWF2ZVpvbmUgPSBsZWF2ZVpvbmU7XG5leHBvcnRzLkxlYXZlWm9uZU9wZXJhdG9yID0gTGVhdmVab25lT3BlcmF0b3I7XG5leHBvcnRzLnNlbGVjdCA9IHNlbGVjdDtcbmV4cG9ydHMuY29tcG9zZSA9IGNvbXBvc2U7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbn0pKSk7Il19